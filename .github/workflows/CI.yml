name: CI
on:
  push:
    branches:
      - main
      - development
      - test*
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    env:
      QT_QPA_PLATFORM: offscreen
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.11'
          - 'lts'
          - 'pre'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - name: Add PCVCTRegistry
        run: julia -e 'import Pkg; Pkg.Registry.add("General"); Pkg.Registry.add(Pkg.RegistrySpec(url="https://github.com/drbergman/PCVCTRegistry.git"))'

      - name: Install system dependencies for Qt
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qtbase5-dev \
            qtdeclarative5-dev \
            qt5-qmake \
            qml-module-qtquick-controls \
            qml-module-qtquick-controls2 \
            qml-module-qtquick2 \
            qml-module-qtgraphicaleffects \
            qml-module-qtquick-layouts \
            qml-module-qtquick-window2 \
            libqt5gui5 \
            libqt5qml5 \
            libqt5quick5 \
            libqt5widgets5 \
            libxcb-xinerama0
            
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    env:
      QT_QPA_PLATFORM: offscreen
    permissions:
      actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2

      - name: Add PCVCTRegistry
        run: julia -e 'import Pkg; Pkg.Registry.add("General"); Pkg.Registry.add(Pkg.RegistrySpec(url="https://github.com/drbergman/PCVCTRegistry.git"))'
        
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()

      - name: Install system dependencies for Qt
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qtbase5-dev \
            qtdeclarative5-dev \
            qt5-qmake \
            qml-module-qtquick-controls \
            qml-module-qtquick-controls2 \
            qml-module-qtquick2 \
            qml-module-qtgraphicaleffects \
            qml-module-qtquick-layouts \
            qml-module-qtquick-window2 \
            libqt5gui5 \
            libqt5qml5 \
            libqt5quick5 \
            libqt5widgets5 \
            libxcb-xinerama0

      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using ModelManagerStudio
          DocMeta.setdocmeta!(ModelManagerStudio, :DocTestSetup, :(using ModelManagerStudio); recursive=true)
          doctest(ModelManagerStudio)
